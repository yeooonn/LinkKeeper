generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 알림 설정 Enum
enum AlertType {
  NONE
  ONE_HOUR
  ONE_DAY
  ONE_WEEK
  CUSTOM
}

model User {
  userName  String    @unique
  userEmail String?   @unique
  password  String?
  github_id String?   @unique
  avatar    String?   @default("@/shared/assets/img/defaultProfile.png")
  userId    String    @id
  links     Link[]
  LinkTag   LinkTag[]
  LinkRead  LinkRead[]
  notifications Notification[] // 알림 기록
}

model Link {
  id         Int       @id @default(autoincrement())
  title      String
  url        String
  memo       String?
  createdAt  DateTime  @default(now())
  alertType  AlertType @default(NONE) // 알림 설정
  customAlertDate DateTime?   // 사용자 정의 알림 시간
  isBookmark Boolean
  linkReads  LinkRead[] 
  userId     String
  user       User      @relation(fields: [userId], references: [userId])
  linkTags   LinkTag[]
  notifications Notification[] // 발송된 알림 기록
  foldername   String?
  folder     Folder?   @relation(fields: [foldername], references: [name])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  linkTags LinkTag[]
}

model LinkTag {
  linkId Int
  tagId  Int
  userId String
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [userId])

  @@id([linkId, tagId])
}

model Folder {
  id       String   @id @default(uuid())
  name     String   @unique
  parentId String?
  parent   Folder?  @relation("FolderToSubfolders", fields: [parentId], references: [id])
  children Folder[] @relation("FolderToSubfolders")

  links    Link[]
}

model LinkRead {
  id        Int      @id @default(autoincrement())
  userId    String
  linkId    Int
  readAt    DateTime @default(now())

  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([userId, linkId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  linkId      Int
  sentAt      DateTime @default(now())
  alertType   AlertType // 발송된 알림의 타입
  message     String?   // 알림 메시지 (선택적)
  user        User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  link        Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([userId, linkId])
}