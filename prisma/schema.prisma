generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SocialAccount {
  id             String   @id @default(cuid())
  provider       Provider
  providerUserId String
  accessToken    String?
  refreshToken   String?
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
}

model User {
  createdAt      DateTime        @default(now())
  email          String?
  id             String          @id
  name           String?
  profileImage   String?
  updatedAt      DateTime        @updatedAt
  links          Link[]
  LinkRead       LinkRead[]
  LinkTag        LinkTag[]
  notifications  Notification[]
  socialAccounts SocialAccount[]
}

model Link {
  id                           Int            @id @default(autoincrement())
  title                        String
  userId                       String
  createdAt                    DateTime       @default(now())
  isBookmark                   Boolean
  memo                         String?
  url                          String
  alertType                    AlertType      @default(NONE)
  customAlertDate              DateTime?
  user                         User           @relation(fields: [userId], references: [id])
  linkReads                    LinkRead[]
  linkTags                     LinkTag[]
  notifications                Notification[]
  folderId        String   
  folder          Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([folderId, title]) 
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  linkTags LinkTag[]
}

model LinkTag {
  linkId Int
  tagId  Int
  userId String
  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@id([linkId, tagId])
}

model Folder {
  id                         String   @id @default(uuid())
  name                       String   @unique
  parentId                   String?
  parent                     Folder?  @relation("FolderToSubfolders", fields: [parentId], references: [id])
  children                   Folder[] @relation("FolderToSubfolders")
  links                      Link[]
}

model LinkRead {
  id     Int      @id @default(autoincrement())
  userId String
  linkId Int
  readAt DateTime @default(now())
  link   Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, linkId])
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    String
  linkId    Int
  sentAt    DateTime  @default(now())
  alertType AlertType
  message   String?
  link      Link      @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, linkId])
}

enum AlertType {
  NONE
  ONE_HOUR
  ONE_DAY
  ONE_WEEK
  CUSTOM
}

enum Provider {
  KAKAO
  NAVER
  GITHUB
}
